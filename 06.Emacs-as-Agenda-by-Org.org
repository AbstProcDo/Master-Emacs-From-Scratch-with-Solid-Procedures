#+TITLE: 06.Emacs as an Agenda by ORG
* 1.Agenda Time Grid
** 1.1 设置org-agenda-files
首先从配置中指定 =org-agenda-files=
#+begin_src emacs-lisp :tangle yes
(setq org-agenda-files '("~/Documents/OrgMode/ORG/diary-by-months/" ;; 2020-01-10 10:45:25
                         "~/Documents/OrgMode/ORG/src/" ;;2019-06-18 13:37:12
))
#+end_src
** 1.2 默认agenda-time-grid的不足之处
Emacs-agenda的Time Grid, 默认设置每两个小时为一个时间段.
开启方法:
time-grid =setq agenda-use-time-grid t=,
默认配置:
#+begin_src emacs-lisp :session agenda  :lexical t
(setq org-agenda-time-grid (quote (((daily today require-timed)
                                    (800 1000 1200 1400 1600 1800 2000)
                                    "......" "----------------"))))
#+end_src
显示为:
#+BEGIN_EXAMPLE
     8:00...... ------------------
     8:30-13:00 Arthur Dent lies in front of the bulldozer
    10:00...... ------------------
    12:00...... ------------------
    12:45...... Ford Prefect arrives and takes Arthur to the pub
    14:00...... ------------------
    16:00...... ------------------
    18:00...... ------------------
    19:00...... The Vogon reads his poem
    20:00...... ------------------
    20:30-22:15 Marvin escorts the Hitchhikers to the bridge
#+END_EXAMPLE

默认配置有以下三个问题:
1. 两个小时的时间间隔太短, 每两个小时一总结工作, 则过于频繁;
2. 起始时间与终止时间的跨度为"早晨8点"到"晚上8点", 人所共知, "晚上8点至11点"正是精力旺盛的时间段;
3. 如果每两小时一间隔, 十二等分24小时, 则agenda-time-grid拉的过长

** 1.3 八分图时间段划分
*解决方案*

"八分图"切割24小时, 每三个小时为一间隔, 工作中尽量做到三个小时一总结.
显示为:
#+BEGIN_EXAMPLE
Day-agenda (W10):
Sunday      8 March 2020
               3:00...... -----------------------------------------------------
               6:00...... -----------------------------------------------------
  Diary:       6:39...... Sunrise
               6:45...... now - - - - - - - - - - - - - - - - - - - - - - - - -
  Diary:       8:00...... Review the week
               9:00...... -----------------------------------------------------
              12:00...... -----------------------------------------------------
              15:00...... -----------------------------------------------------
              18:00...... -----------------------------------------------------
  Diary:      18:13...... Sunset
              21:00...... -----------------------------------------------------
              24:00...... -----------------------------------------------------
  Diary:      ISO date: Day 7 of week 10 of 2020
#+END_EXAMPLE
配置如下:
#+begin_src emacs-lisp :session agenda :lexical t
;;---------------------------------------------
;;org-agenda-time-grid
;;--------------------------------------------
(setq org-agenda-time-grid (quote ((daily today require-timed)
                                   (300
                                    600
                                    900
                                    1200
                                    1500
                                    1800
                                    2100
                                    2400)
                                   "......"
                                   "-----------------------------------------------------"
                                   )))
#+end_src

*思维概念*

单单从agenda这个工具中设置好, 显然是不够的, 劳神费力的设置一番, 也未必用得得心应手,
因此不仅要设置emacs-agenda这个工具, 还要设置头脑的思维模式,不仅身体里要有"生物钟", 思维中也要有"逻辑钟"/"概念钟".

#+tblname: 八分图时间段的概念命名
|----+-----------+----------+------------------|
| No | 时间段    | 维基命名 | 自定义命名       |
|----+-----------+----------+------------------|
|  1 | 0时~3时   | 凌晨     | 午夜(夜)         |
|  2 | 3时~6时   | 拂晓     | 破晓(破,dawn)    |
|  3 | 6时~9时   | 早晨     | 早晨(早,morning) |
|  4 | 9时~12时  | 午前     | 明昼(明)         |
|  5 | 12时~15时 | 午后     | 午后(午)         |
|  6 | 15时~18时 | 傍晚     | 下午(下)         |
|  7 | 18时~21时 | 薄暮     | 向晚(向,Dusk)    |
|  8 | 21时~24时 | 深夜     | 深夜(深,Night)   |
|----+-----------+----------+------------------|
时间段的命名取自中文(日文)维基百科(搜"早晨"),
- 修改"3时至6时"的"拂晓"为"破晓", 是因为"拂"字是"杨柳岸晓风残月", "破"字是精神焕发的日出(起床)动作；　
# 对"拂"的形容没有问题, 对"破晓"的阐述, 日出, 天体运动, 势不可挡的力量, "日出江花红胜火"则过分热烈.
- 修改"9时至12时"的"午前"为"明昼", 考虑到"午前"的字节读起来不响亮, 该时间段"心明眼亮", "神清气爽"正是效率最高的阶段, 因此取响亮的单字"明",
  后面的"昼"是附会.
- 修改"15时至18时"的"傍晚"为"下午", 考虑到下午三点之后正是第二个高效工作的阶段, 添加一个"晚"字进来, 着实会潜移默化影响工作效率.

*头脑呈现*

历史缘故, 时间在头脑中的具象是"圆形表盘",
因此八个时间段的具象呈现, 在思考过程中的形象,
1) 可以是agenda呈现的表格或者子弹列表
2) 可以是24小时八分图
3) 也可以是两个紧挨着的12小时的四分图.

* 2.Integrated with a Diary

在agenda-time-grid上, 添加四个时间锚点,
- 日出日落
- 月相
- ISO日期
- 中国农历日期

显示为:
#+BEGIN_EXAMPLE
Day-agenda (W11):
Tuesday    10 March 2020
  Diary:       1:44...... Full Moon (CST)
               3:00...... -----------------------------------------------------
               6:00...... -----------------------------------------------------
  Diary:       6:35...... Sunrise
               9:00...... -----------------------------------------------------
              12:00...... -----------------------------------------------------
              15:00...... -----------------------------------------------------
              18:00...... -----------------------------------------------------
  Diary:      18:16...... Sunset
              21:00...... -----------------------------------------------------
              24:00...... -----------------------------------------------------
  Diary:      Chinese date: Cycle 78, year 37 (庚子), month 2 (己卯), day 17 (壬子)
  Diary:      ISO date: Day 2 of week 11 of 2020
#+END_EXAMPLE

** 2.1 "日月之行, 若出其里"

单纯的agenda-time-grid单薄而孤独, 仅仅是列出来8个时间序列, 孑然一身, 与万事万物没有一丝牵割与联系.
引入日出日落和月相的时刻到agenda-time-grid中, agenda-view瞬间活了起来, 不再只是孤立的表格文本, 而是与天地四时构建了物理关联.

时间的本质是什么? 我们观测天体的运行规律, 获得对时间的直观认知与准确测量.

此处引用"曹丞相"在<观沧海>中的两句诗文.
"日月之行, 若出其里; 星汉灿烂, 若出其中."
心驰神往之间, 描绘的正是是将sunrise-and-sunset整合进agenda-time-grid的功能.

** 2.2 整合diary到org-agenda

整合diary-file到org-agenda中的配置:

#+begin_src emacs-lisp :session agenda :lexical t
(setq org-agenda-include-diary t)
(setq org-agenda-diary-file "~/Documents/OrgMode/ORG/src/standard-diary") ;;2020-03-02 10:47:06
(setq diary-file "~/Documents/OrgMode/ORG/src/standard-diary")
#+end_src


我的diary-file放置在"~/Documents/OrgMode/ORG/src/standard-diary"

** 2.3 Diary的基本内容

写入内容:

#+BEGIN_EXAMPLE
;;Day info
;; 日出而作, 日落而息
%%(diary-sunrise)
%%(diary-sunset)
%%(diary-lunar-phases)
;;
%%(diary-iso-date)
;;中国农历
%%(diary-chinese-date)
#+END_EXAMPLE

其中 =diary-sunrise= 与 =diary-sunset= 需要自定义:

** 2.4 自定义日出与日落时间序列

*设置当地的坐标*

#+begin_src emacs-lisp :session sicp :lexical t
(setq calendar-latitude 40.0024) ;;lat, flat
(setq calendar-longitude 116.2962) ;;long是经度
#+end_src

*Sunrise and Sunset*

#+begin_src emacs-lisp :session agenda  :lexical t
;;Sunrise and Sunset
;;日出而作, 日落而息
(defun diary-sunrise ()
  (let ((dss (diary-sunrise-sunset)))
    (with-temp-buffer
      (insert dss)
      (goto-char (point-min))
      (while (re-search-forward " ([^)]*)" nil t)
        (replace-match "" nil nil))
      (goto-char (point-min))
      (search-forward ",")
      (buffer-substring (point-min) (match-beginning 0)))))

(defun diary-sunset ()
  (let ((dss (diary-sunrise-sunset))
        start end)
    (with-temp-buffer
      (insert dss)
      (goto-char (point-min))
      (while (re-search-forward " ([^)]*)" nil t)
        (replace-match "" nil nil))
      (goto-char (point-min))
      (search-forward ", ")
      (setq start (match-end 0))
      (search-forward " at")
      (setq end (match-beginning 0))
      (goto-char start)
      (capitalize-word 1)
      (buffer-substring start end))))
#+end_src

配置完毕, 显示为:

#+BEGIN_EXAMPLE
Day-agenda (W27):
Sunday      5 July 2020
               3:00...... -----------------------------------------------------
  Diary:       4:53...... Sunrise
               6:00...... -----------------------------------------------------
  Diary:       8:00...... Review the week
               9:00...... -----------------------------------------------------
              12:00...... -----------------------------------------------------
  Diary:      12:40...... Full Moon (CST)
              15:00...... -----------------------------------------------------
              18:00...... -----------------------------------------------------
  Diary:      19:46...... Sunset
              21:00...... -----------------------------------------------------
              24:00...... -----------------------------------------------------
  Diary:      Chinese date: Cycle 78, year 37 (庚子), month 5 (壬午), day 15 (己酉)
  Diary:      ISO date: Day 7 of week 27 of 2020
#+END_EXAMPLE

** 2.5 与时间构筑物理关系

人类基因里对时间的理解就是日出日落与月相的变化.
观察"天体"的运动是人类测量与记录时间的的起点, 我们对时间的理解根植于此.
在agenda中添加sunrise and sunset或许可以帮助思维回归到对时间最直觉和原始的理解, 唤醒体内原初的生命力与觉察力.
agenda中的日出日落不仅帮助界定有意义的时间范围, 而且构建个人与天体间的物理关系, 尤其是在雾霾严重, 少见星星月亮的城市.
这种"随四时而动", 与自然融为一体的关系或许值得珍惜. (差点想说天人合一)
(备注:这一段需要以后逐步完善, 想法没有很好的表述出来, 当早起看到agenda中显示sunrise与sunset, 而且作为计时锚点的时候, 感觉体内对时间的本能被激活)

* 3.Interact with Calendar

本章从agenda-view切入, 论述org作为"计划与管理"的地表最强工具的功能,
第一节"agenda-time-grid"推荐了以3个小时为时间段, 八等分一天24小时的time-grid表格,  并对每个时间段命名;
第二节"integrated with a Diary", 引入"自然时间"锚点sunrise-and-sunset, moon-phase, 与时间的最本质-天体的运行构建物理关联.
第三节(本节)以及第四节将论述最核心的问题:Review
第五节到第八节在agenda的基础上深入探讨org-todo的管理与规划的工作流．

本节初步探讨如何提高review的效率, 即如何速度浏览agenda-view,以及快递定位某日的agenda-view.

** 3.1.内置的Agenda-View Display

Agenda提供四种视图模式, 便于快速的review.
- org-agenda-day-view :: 快捷键 v d
#+ATTR_HTML: :width 300px
[[file:images/org-day-view.png]]
- org-agenda-week-view  ::  快捷键 v w
#+ATTR_HTML: :width 300px
[[file:images/org-week-view.png]]
- org-agenda-month-view  ::  快捷键 v m
- org-agenda-year-view ::  快捷键 v y

常用的是"day-view"与"week-view", 因为周回顾更频繁, 而"month-view"需要频繁操作page-down和page-up,不如分四次week-review.

在一种agenda-view的模式下, 查看前后的日期或者时间段的方法:
- org-agenda-earlier :: 快捷键 b (backwards)
- org-agenda-later  :: 快捷键 f (forwards)
- org-agenda-goto-today :: 快捷键 . (dot)
- org-agenda-reset-view :: 快捷键 v SPC

以上命令协助方便的查看当前视图前前后后的时间点(day)或者时间段(week), 若要查看特定的日期, 则颇为不便.
比如要查看2019-08-01当日的主要活动, 操作backwards和forwards抵达目的日期比较耗费时间.

作为解决方案, Emacs提供了function =org-agenda-goto-calendar= 与calenda互动.

** 3.2.从"Calendar中操作"Agenda"

Functions: =org-agenda-goto-calendar= 与 =org-calendar-goto-agenda= 架起calendar与agenda之间的桥梁, 凿穿二者之间的壁垒.
快捷键的设置也秉持这一原则, 采用相同的字母c(calendar),
Agenda中按键"c"调出calendar界面, Calendar中按键"c"调出来目标日期的agenda界面.

由此, 查看特定日期"2019-08-01"的活动日志的分步骤操作为:
1. 在当前的agenda-day-view界面下按键c, 调出来calendar窗口
2. 光标在日历中移动到目标日期"2019-08-01"
3. 在光标处按键c, 调出目标的agenda界面.

其中第一步和第三部很简单, 都是按键c, 关键是第二步移动光标到目标日期的日历操作.

*** 3.2.1.日历的逻辑分割

对"日历"的操作, 分为三个层次:
- Day, Week 日/周/
- Month, Season(3-months)
- Year
思考过程也最好按照emacs-calendar设置的这三个清晰地层次.

*** 3.2.2.文本命令与日历命令的对比:

日历中的motion与文本中的motion一一对应,

基本思路是将Calendar作为文本处理.
对应关系表格如下:

|-------+---------------------+------------------------------------|
| Keys  | Text                | Calendar                           |
|-------+---------------------+------------------------------------|
|       | *character*         | *day*                              |
| C-f   | forward-char        | calendar-forward-day               |
| C-b   | backward-char       | calendar-backward-day              |
|-------+---------------------+------------------------------------|
|       | *word*              |                                    |
| M-f   | forward-word        | break month limit to move around   |
| M-b   | backward-word       |                                    |
|-------+---------------------+------------------------------------|
|       | *line*              | *week*                             |
| C-a   | beginning-of-line   | calendar-beginning-of-week         |
| C-e   | end-of-line         | calendar-end-of-week               |
| C-p   | previous-line       | calendar-backward-day              |
| C-n   | next-line           | calendar-forward-week              |
|-------+---------------------+------------------------------------|
|       | *sentence*          | *month*                            |
| M-a   | backward-sentence   | calendar-beginning-of-month        |
| M-e   | forward-sentence    | calendar-end-of-month              |
|-------+---------------------+------------------------------------|
| >     |                     | calendar-scroll-left               |
| <     |                     | calendar-scroll-right              |
|-------+---------------------+------------------------------------|
|       | *paragraph*         |                                    |
| M-{   | backward-paragraph  | calendar-forward-month             |
| M-}   | forward-paragrap    | calendar-backward-month            |
|-------+---------------------+------------------------------------|
|       |                     | *3-months*                         |
| C-v   | scroll-down         | calendar-scroll-left-three-months  |
| M-v   | scroll-up           | calendar-scroll-right-three-months |
|-------+---------------------+------------------------------------|
|       | *page*              | *year*                             |
| C-x [ | backward-page       | calendar-forward-year              |
| C-x ] | forward-page        | calendar-backward-year             |
|-------+---------------------+------------------------------------|
|       | *buffer*            |                                    |
| M-<   | beginning-of-buffer | calendar-beginning-of-year         |
| M->   | end-of-buffer       | calendar-end-of-year               |
|-------+---------------------+------------------------------------|

此处再次印证了一个问题: Emacs不仅能提高工作效率, 而且能潜移默化改造大脑的思考模式.
其中的概念便是，buffer与page对应的都是year。

*** 3.2.3.便捷的命令

- g d :: Move point to specified date (=calendar-goto-date=).

- g D :: Move point to specified day of year (=calendar-goto-day-of-year=).

- g w :: Move point to specified week of year (=calendar-iso-goto-week=).

- o   :: Center calendar around specified month (=calendar-other-month=).

- .   :: Move point to today's date (=calendar-goto-today=).

calendar-count-days-region
C-c C-y (org-evaluate-time-range)
- [[https://emacs.stackexchange.com/questions/23893/counting-the-number-of-days-that-have-passed-since-a-certain-date][org-evaluate-time-range]]
- [[https://emacs.stackexchange.com/questions/56339/designate-a-speficied-day-of-20-days-later/56343#56343][Insert a future date]]
  + org-read-date Documentation

** 3.3."Calendar"与"Agenda"合二而一

上述的解决方案, 按键c显性的调用calendar, 有没有在逻辑上更加"丝滑"的方法呢?
答案是: =org-agenda-goto-date= 快捷键"j".

三步操作分解为:
1. 在当前agenda中按键j
2. 移动到目标日期
3. 回车则直接跳转到目标日期的agenda
此处应用的是"插入时间戳"的方法, 隐藏了显性的跳转, 逻辑上更加顺畅.

#+ATTR_HTML: :width 300px
[[file:images/org-agenda-jump.png]]

这种"The date/time prompt"移动到目标日期的光标移动与直接在日历中操作稍有不同, 不同的原因是当前光标在mini-buffer中, 只能间接操作calendar.
表格如下:

|---------------+----------------------------------------|
| (RET)         | Choose date at point in calendar.      |
| (mouse-1)     | Select date by clicking on it.         |
| (S-RIGHT)     | One day forward.                       |
| (S-LEFT)      | One day backward.                      |
| (S-DOWN)      | One week forward.                      |
| (S-UP)        | One week backward.                     |
| (M-S-RIGHT)   | One month forward.                     |
| (M-S-LEFT)    | One month backward.                    |
| (>)           | Scroll calendar forward by one month.  |
| (<)           | Scroll calendar backward by one month. |
| (M-v)         | Scroll calendar forward by 3 months.   |
| (C-v)         | Scroll calendar backward by 3 months.  |
|---------------+----------------------------------------|

还是三个清晰地逻辑单元:
- Day, Week 日/周/
- Month, Season(3-months)
- Year
此处的特点是全部需要Shift键，可以将其理解为“跳转出来”。

** 3.4.Personalize Agenda View

#+begin_src emacs-lisp :tangle yes
(general-advice-add 'org-agenda :after
            (lambda (_)
              (when (equal (buffer-name)
                           "*Org Agenda*")
                (calendar)
                (other-window 1))))

(general-advice-add 'org-agenda-quit :before
            (lambda ()
              (let ((window (get-buffer-window calendar-buffer)))
                (when (and window (not (one-window-p window)))
                  (delete-window window)))))
#+end_src

#+RESULTS:

* 4.Event, Note and Task
** 4.1 Diary Template

日记模板划分为四个区域:
1. 日记, 如"方方日记"那样
2. 计划, Heading设置为Procedures
3. 事件, Events, 周边的主要事件, 比如部门聚餐.
4. 任务, Tasks, 记录当日的收集的任务.

#+ATTR_HTML: :width 380px
[[file:images/05.Emacs-as-a-agenda-日记模板.png]]

** 4.2 Org's Capture System
*** 4.2.1 Capture Event
公司早会之后, 同事"李子轩"问我借走了一直圆珠笔, 于是随手记录该事件.

"M-x org-caputre"触发capture-template Buffer.
#+ATTR_HTML: :width 380px
[[file:images/05.Emacs-as-a-agenda-capture-buffer.png]]

按键"e", 选择"Event"
#+ATTR_HTML: :width 380px
[[file:images/05.Emacs-as-a-agenda-capture-event.png]]
如上图所示, emacs-org自动捕捉记录的event到当日的事件Heading下面, 输入完毕后按键"C-c C-c"

: [2023-02-11 Sat 15:05]
: 事件用heading记录太过于隆重了。

此时查看Agenda, 便一目了然.
#+ATTR_HTML: :width 380px
[[file:images/04.Emacs-as-a-agenda-event-agenda.png]]
"圆珠笔"是早上8:33顺走的, 真万难抵赖.

*** 4.2.2 Capture notes and ideas

"神来之笔"的想法, 不仅应该及时地记录下来, 还应该打上准确的时间戳以记录想法产生的具体时间.

重复上述"Capture Event"的操作, 按键"n", 选择note.

#+ATTR_HTML: :width 380px
[[file:images/05.Emacs-as-a-agenda-capture-note.png]]
查看Agenda,
#+ATTR_HTML: :width 380px
[[file:images/05.Emacs-as-a-agenda-idea-agenda-view.png]]

每晚睡前Review之时, 一眼便能看到在早上"8:48"产生了一个"神来之笔"的想法.

*** 4.2.3 Capture Task

任务处理是org-mode最核心的功能, 添加任务的方法与前两项相同.

从agenda-dispatcher选择todo list, 标记任务状态为"STRT"并开始计时.

此时再回到agenda-view
#+ATTR_HTML: :width 380px
[[file:images/05.Emacs-as-a-agenda-task-agenda-view.png]]

** 4.3 Diary Archive

日记文件"todo.today.org"记录本周七天的活动.
满一周后归档到"diary-by-month"文件夹中

#+BEGIN_EXAMPLE
$ ls diary-by-months/  | grep 2020
2020-01.org
2020-02.org
2020-03.org
#+END_EXAMPLE

* 5.Agenda Remote Control

=k c=
You can also call =org-capture= in a special way from the agenda, using the {{{kbd(k c)}}} key combination. With this access, any timestamps inserted by the selected capture template defaults to the date at point in the agenda, rather than to the current date.

* 6.Refined Workflow

** 1.设置“天干地支”纪年法

#+begin_src emacs-lisp :tangle yes
(setq calendar-chinese-celestial-stem ["甲" "乙" "丙" "丁" "戊" "己" "庚" "辛" "壬" "癸"])
(setq calendar-chinese-terrestrial-branch ["子" "丑" "寅" "卯" "辰" "巳" "午" "未" "申" "酉" "戌" "亥"])
#+end_src
** 2.重命名 category
#+begin_src emacs-lisp :tangle yes
#+CATEGORY: Today
#+end_src

** 3.配置agenda头部展示农历和阳历

#+begin_src emacs-lisp :tangle yes
(setq org-agenda-format-date 'org-agenda-format-date-aligned)

(defun org-agenda-format-date-aligned (date)
  "Format a DATE string for display in the daily/weekly agenda, or timeline.
      This function makes sure that dates are aligned for easy reading."
  (require 'cal-iso)
  (let* ((dayname (aref cal-china-x-days
                        (calendar-day-of-week date)))
         (day (cadr date))
         (month (car date))
         (year (nth 2 date))
         (cn-date (calendar-chinese-from-absolute (calendar-absolute-from-gregorian date)))
         (cn-month (cl-caddr cn-date))
         (cn-day (cl-cadddr cn-date))
         (cn-month-string (concat (aref cal-china-x-month-name
                                        (1- (floor cn-month)))
                                  (if (integerp cn-month)
                                      ""
                                    "(闰月)")))
         (cn-day-string (aref cal-china-x-day-name
                              (1- cn-day))))
    (format "%04d-%02d-%02d 周%s %s%s" year month
            day dayname cn-month-string cn-day-string)))
#+end_src
