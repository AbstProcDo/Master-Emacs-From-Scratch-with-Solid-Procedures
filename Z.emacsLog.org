#+TITLE: Z Emacs Log
* Emacs的文章
https://karthinks.com/software/avy-can-do-anything/#remembering-to-avy
* 回到windows版本的Emacs
[2021-06-07 Mon 07:10]
重新回到 Windows 版本的 Emacs, 因为输入法能够快速的打字才是效率的关键.
而wsl2中使用emacs, 所遇到的rime输入法的粘滞感始终不能解决, 因此大大降低输入法的效率.
* counsel-rg提示error-code的问题
[2021-06-14 Mon 22:10]
https://github.com/abo-abo/swiper/issues/2339

If rg called by counsel-rg returns an error code, it will discard any =incremental results= it found and display Error code 2 instead, even if it found matches for files it did have access to.

This usually happens if some of the files in the rg directory cannot be accessed by rg because of permissions issues on some subset of the files. However I can still use rg on the console and get a list of valid results anyways (interspersed with error messages). You can even see these incremental results in counsel-rg so long as it's still searching, but it discards them all when it finishes because of the error. Now a single unreadable file in the entire project can render counsel-rg inoperable.

- 在windows上的解决方案

#+begin_src  elisp
(after! counsel
  (advice-add 'counsel-rg
              :around
              (lambda (func &rest args)
                (cl-letf (((symbol-function #'process-exit-status)
                           (lambda (_proc) 0)))
                  (apply func args)))))
#+end_src

- 在macOS上的解决方案：

#+begin_src js
(after! counsel
  (setq counsel-rg-base-command "rg -M 240 --with-filename --no-heading --line-number --color never %s || true"))
#+end_src

至此，counsel-rg 上的问题已经得到了全部的解决。

* Eshell提示“Text is read only"以及freeze的问题。
https://emacs.stackexchange.com/questions/26978/eshell-will-enter-text-is-read-only-and-freeze

#+begin_src eshell
(setq eshell-prompt-regexp "^[^λ]+ λ ")
(setq eshell-prompt-regex "^[^λ]+ λ ")
#+end_src
全部修改为以上两项，

* 图片处理方案启动org-download
转而采用最简单的模式。
* iconv转成ascii
iconv -f utf-8 -t ascii//TRANSLIT
* 主题使用历史
 发现work主题也很好，绿色的背景赏心悦目。
* regex选择后复制
M-x occur
* 快捷的选择元素
请教下，按ctrl+f 是向前移动一个字符，ctrl+e 移动到行尾。 加上shift键盘之后，ctrl+shift+f 是向前移动一个字符并选中，ctrl+shift+e向前移动到行尾并选中。刚刚发现这么好用的功能。但是查不到他们调用的命令。都是characer-forward. 怎么查呀？ctrl+shift+f 向前移动并选中，mark-point是从哪里加上去的？
* 按照元素移动 Matching Pairing Parenthese

This is actually a very standard binding: C-M-f and C-M-b to go back and forwards by default. In most modes C-M-f will take you forwards to the matching brace and C-M-b will take you backwards to the matching brace. This also works for things like quotes, pretty much the same way.
These bindings are easy to remember if you already use C-f and C-b for navigation. (If you don't, you should.) They're just like moving forward and backwards by a character lifted to moving by expression (which depends on mode).
# 问题总结
*With emacs, how to go to the pairing (balancing) parentheses*
When cursor on one parentheses, how to jump to the pairing parentheses. Good to work in emacs -nw .
Just like % in Vim.

;;After got hint from @Lindy, @Francesco, I found more:
  C-M-f     Move forward over a balanced expression
  C-M-b     Move backward over a balanced expression
  C-M-k     Kill balanced expression forward
  C-M-SPC   put the mark at the end of the sexp.
  C-M-n  Move forward over a parenthetical group
  C-M-p  Move backward over a parenthetical group
  ;; C-M key binding can also be done by --> ESC Control-key
  ;;And put this to .emacs, it will highlight opening/closing parens:
  (show-paren-mode 1)

Use C-M-right and C-M-left (respectively backward-sexp and forward-sexp) to go to the beginning or the end of the current expression. This works for parenthesis pairs but also for plain words.
# 此处需要写文章详细总结一番呀。

* 段落的处理与element元素
从 =org-mark-element= =mark-paragraph= 等函数来看，我的段落之间要有空格。
=org-mark-element= 绑定的快捷键是 M-h
=org-forward-element= M-}

熟悉一番这些element的操作呀。

9 matches for "element" in buffer: *Help*
     83:C-M-t           org-transpose-element
     85:M-h             org-mark-element
     86:M-{             org-backward-element
     87:M-}             org-forward-element
    124:C-c C-^         org-up-element
    125:C-c C-_         org-down-element
    302:C-x n e         org-narrow-to-element
   1300:M-n             ivy-next-history-element
   1302:M-p             ivy-previous-history-element

* Occur的用法
Occur就是出现的次数。
M-s o :: 此处的s是search。
C-c C-e         +ivy/woccur
C-c C-o         ivy-occur
* Outline代码
Outshine
发现后一个好工具，跟读org一样阅读elisp ，
我觉得outline这个思路超棒，试过在代码里备注 H1 H2 H3， 然后用swiper看结构。 他的这个思路可以用在所有语言上。
[[https://github.com/alphapapa/outshine][Outline]]
