#+TITLE: Appendix D: Email Management
* Sending Mails From @qq.com
** 从QQ邮箱的设置中开启SMTP等服务

[[file:./images/qq邮箱设置.png]]

** Config SMTP
从.emacs中添加配置:
#+begin_src emacs-lisp :session sicp :lexical t
(setq message-send-mail-function 'smtpmail-send-it)
(setq user-mail-address "abst.proc.do@qq.com")
(setq user-full-name "abst.proc.do")

(setq smtpmail-smtp-user "abst.proc.do@qq.com"
      smtpmail-smtp-server "smtp.qq.com"
      smtpmail-smtp-service 465
      smtpmail-stream-type 'ssl)

;;Debug
(setq smtpmail-debug-info t)
(setq smtpmail-debug-verb t)
#+end_src

** Authorization
短信获取qq邮箱的授权码后, 新建文件 =.authinfo=
#+begin_src emacs-lisp :session email :lexical t
machine smtp.qq.com  login abst.proc.do@qq.com password 授权码(比如abcd等)
#+end_src
配置文件中添加
#+begin_src emacs-lisp :session email :lexical t
(require 'auth-source);; probably not necessary
(setq auth-sources '("~/.authinfo" "~/.authinfo.gpg"))
;;(customize-variable 'auth-sources) ;; optional, do it once
#+end_src

** Testing
此时完整的配置文件为:
#+begin_src emacs-lisp :session email :lexical t
;;Sending Email

(require 'auth-source);; probably not necessary
(setq auth-sources '("~/.authinfo" "~/.authinfo.gpg"))
;;(customize-variable 'auth-sources) ;; optional, do it once

(setq message-send-mail-function 'smtpmail-send-it)
(setq user-mail-address "abst.proc.do@qq.com")
(setq user-full-name "abst.proc.do")

(setq smtpmail-smtp-user "abst.proc.do@qq.com"
      smtpmail-smtp-server "smtp.qq.com"
      smtpmail-smtp-service 465
      smtpmail-stream-type 'ssl)

;;Debug
(setq smtpmail-debug-info t)
(setq smtpmail-debug-verb t)
#+end_src

C-x m (Compose-mail)

[[file:./images/sending-email.png]]
C-c C-c (message-send-and-exit)
提示发送成功后, 检查qq邮箱.

[[file:./images/qq-receive-mail.png]]

上述冗余配置能保证邮件发送百分百成功.
** Mail Commands

- C-c C-c
  Send the message, and bury the mail buffer (=message-send-and-exit=).

- C-c C-s
  Send the message, and leave the mail buffer selected (=message-send=).

- =mail-from-style=
  p- =parens=
  Use both address and full name, as in: 'king@grassland.com (Elvis Parsley)'.

** Summary
先发出去邮件, 后面的操作便能水到渠成
Emacs Manual的32.Sending-Mail有六个小节.

- [[#32-sending-mail][32) Sending Mail]]
- [[#321-the-format-of-the-mail-buffer][32.1 The Format of the Mail Buffer]]
- [[#322-mail-header-fields][32.2 Mail Header Fields]]
- [[#323-mail-aliases][32.3 Mail Aliases]]
- [[#324-mail-commands][32.4 Mail Commands]]
  - [[#3241-mail-sending][32.4.1 Mail Sending]]
  - [[#3242-mail-header-editing][32.4.2 Mail Header Editing]]
  - [[#3243-citing-mail][32.4.3 Citing Mail]]
  - [[#3244-mail-miscellany][32.4.4 Mail Miscellany]]
- [[#325-mail-signature][32.5 Mail Signature]]
- [[#326-mail-amusements][32.6 Mail Amusements]]

* Rmail
** Experience movemail
Rmail的后端调用movemail, 因此先手工体验一般movemail
#+BEGIN_SRC bash
sudo apt-get install mailutils
#+END_SRC

命令行中运行
#+BEGIN_SRC bash
movemail -v 'imaps://abst.proc.do:授权码@imap.qq.com:993' ~/RMAIL
#+END_SRC
或者在 =.bashrc= 中alias
#+BEGIN_SRC bash
alias rmail="movemail -v 'imaps://abst.proc.do:授权码@imap.qq.com:993' ~/RMAIL"
#+END_SRC

运行后
#+BEGIN_SRC bash
$ rmail
movemail: number of messages in source mailbox: 1
movemail: number of processed messages: 1
movemail: number of errors: 0 / 0
#+END_SRC

** View RMAIL File
此时查看Rmail文件

#+BEGIN_SRC bash :results output
cat ~/RMAIL | head -20
#+END_SRC

#+RESULTS:
#+begin_example
From abst.proc.do@qq.com Sun Feb  9 16:15:21 2020
Received: from alpha ([2408:84e1:c9:b898:ec27:f5c0:e2e9:342])
	by newxmesmtplogicsvrsza1.qq.com (NewEsmtp) with SMTP
	id 3D61005A; Sun, 09 Feb 2020 16:15:22 +0800
X-QQ-mid: xmsmtpt1581236122t4scqzp4k
X-QQ-XMAILINFO: N+RU7Cqv682CsQywiWIDqBW+wHZfUBTpX+cVcuEF2CSjI/pLxDbDKwJ/M/iOqN
	 TXJrGlWVB5hoMX68YnRAm3wDeOWUL5f+y87OXcEn0nXTu8k8TZZFHDAPk422wdkrIWIctYc37DM3
	 GXnoiOAE0/pL5B7F4sgPhLYYdIh+uWeQjEbr+HBFZ0JOPlEGX+6IPcq2Pp6m9KHClC+IynnFh2ti
	 kPcv0XT4GgeD+AK1HjAwBwNfZteop0AQIW5gbzdTmDLLoc54wabnTsd12uVuBnWjaLtoH8GPrhol
	 xE+3Zsqw2Sao4QkhQjID46A9xANcnUJstri++//QcGkewMXAFVrIUKo0b0SMhb0O4+tZpoB6Voiq
	 8I64xUygnlIhAq8WQyA/t+skj8lhDUyyhPzpEHeQPgsb1L3YbVuUPAzbBiv/xs96Nm3DF6xP50ms
	 8YA3gRbdvg85SiKWbRy9O1I1d5uGiXbZJv911ozn0fFRdJYaJ1zrCKy8Wk3DShsN+jmWs1pmXeKx
	 W9b7Qxvon5XSwdEQkCVTHqNhRzxfoQA7AAIj9QgJ32V7u+iCqG6qMed+knLKko3JoKiWaJCEsATp
	 wmmcqGz6KQe0h50gf+yG6y/eOYRn6nAnrpXGM=
From: abst.proc.do@qq.com (abst.proc.do)
To: abst.proc.do@qq.com
Subject: =?utf-8?B?5o+Q6ZeuOiDlpoLkvZXorr7nva5tYm94?=
Date: Sun, 09 Feb 2020 16:15:21 +0800
Message-ID: <8736bki3c6.fsf@abst.proc.do>
MIME-Version: 1.0
#+end_example

读到的是普通的文本, 而且decode也有问题, 重置 =rmail-file-coding-system=

#+begin_src emacs-lisp :session sicp :lexical t
(setq rmail-file-coding-system t)
#+end_src

然后在 =~/RMAIL= 中启动 =rmail-mode=,

[[file:./images/rmail-mode.png]]
邮件的基本操作:
- Moving Among Mails
  - n 查看下一封邮件
  Move to the next nondeleted message, skipping any intervening deleted messages (=rmail-next-undeleted-message=).

  - p 查看上一封有家
  Move to the previous nondeleted message (=rmail-previous-undeleted-message=).

- Reply Mails
  - m
  Send a message (=rmail-mail=).

  - c
  Continue editing the already started outgoing message (=rmail-continue=).

  - r
  Send a reply to the current Rmail message (=rmail-reply=).

  - f
  Forward the current message to other users (=rmail-forward=).

  - C-u f
  Resend the current message to other users (=rmail-resend=).

  - M-m
  Try sending a bounced message a second time (=rmail-retry-failure=).

[[file:./images/Reply-Mail.png]]

** Manually Rmail workflow
总结以上手工Rmail的工作流:
由于配置 =.bashrc=
#+BEGIN_SRC bash
alias rmail="movemail -v 'imaps://abst.proc.do:授权码@imap.qq.com:993' ~/RMAIL"
#+END_SRC

因此可以
1. 从shell中运行rmail, 更新收件箱 =~/RMAIL=,
2. rmail-mode模式下查看 =~/RMAIL=

** Automatic Rmail
将Rmail workflow的第一步合并进第二步中,
从配置中添加:
#+begin_src emacs-lisp :session email :lexical t
;; Reading Mail
(setq rmail-primary-inbox-list
      '("imaps://abst.proc.do:授权码@imap.qq.com:993")
      )
(setq rmail-movemail-program "/usr/bin/movemail")
#+end_src
load-file后, M-x rmail
运行的message
#+BEGIN_SRC bash
new messages...done (1)
Saving file /home/gaowei/RMAIL...
Wrote /home/gaowei/RMAIL [2 times]
1 new message read
Quit
#+END_SRC
#+ATTR_HTML: :width 500px
[[file:./images/Automatic-Rmail.png]]
** Summary
Sending Email与Rmail, 可以应用Emacs自如的收发邮件,
但并不能有效的管理邮件.
对邮件进行管理需要引入更加便利的自动化工具gnus

* Gnus: 1.Fundermental Configuration

Gnus的基本配置很简单, 只需要几行代码
新建文件 =~/.gnus= 然后填入以下代码

#+begin_src emacs-lisp :session gnus :lexical t
(setq user-mail-address "abst.proc.do@qq.com"
      user-full-name "abst.proc.do")

(setq gnus-select-method
      '(nnimap "qq.com"
               (nnimap-address "imap.qq.com")
               (nnimap-inbox "INBOX")
               (nnimap-expunge t)
               (nnimap-server-port 993)
               (nnimap-stream ssl)))

(setq send-mail-function 'smtpmail-send-it
      smtpmail-smtp-server "smtp.qq.com"
      smtpmail-smtp-service 465
      smtpmail-stream-type 'ssl
      gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")
#+end_src
并在 =.authinfo= 中加入一行imap的配置,
#+BEGIN_SRC bash
machine imap.qq.com  login abst.proc.do@qq.com password 授权码
machine smtp.qq.com  login abst.proc.do@qq.com password 授权码
#+END_SRC

仅此而已, 便能开工
=M-x gnus=
调出邮件文件夹界面
[[file:./images/gnus-inbox.png]]
提示收到inbox收到2封邮件
也可以 L (gnus-group-list-all-group)查看所有的邮箱文件夹
[[file:./images/gnus-group1.png]]

在 =INBOX= 上按键 =Space= 查看收件箱
#+ATTR_HTML: :width 600px
[[file:./images/gnus-inbox-2.png]]


*退出Gnus*

在Group buffer中按键q退出gnus.
* Gnus: 2.Concepts
Gnus有三个基础概念, Group Buffer, Summary Buffer and Article Buffer
分别对应邮件的 1)分类文件夹(收件箱) 2) 邮件列表 3) 邮件正文

| Gnus           | Mail                |
|----------------+---------------------|
| Group Buffer   | Directoray Category |
| Summary Buffer | Mail list           |
| Article Buffer | Mail Text           |
|----------------+---------------------|

*Group Buffers*
[[file:./images/gnus-group1.png]] [[file:./images/mail-dirs.png]]

*Summary Buffer*

#+ATTR_HTML: :width 400px
[[file:./images/gnus-summary-buffer.png]] [[file:./images/mail-list.png]]

*Article Buffer*
#+ATTR_HTML: :width 300px
[[file:./images/gnus-article-buffer.png]] [[file:./images/mail-text.png]]
* Gnus: 3.Group Buffer
** Window Layout
M-x gnus默认"use-full-window", 会删掉当前的其他窗口而占据整个屏幕, 因为 =gnus-use-full-window= 默认设置为 =t=, 这会带来诸多不便.
关闭"use-full-window"的模式
#+begin_src emacs-lisp :session sicp :lexical t
(setq gnus-use-full-window nil)
#+end_src

** Visualize Groups
Group Buffer默认只显示有未读邮件的Group,

查看其他邮件组, 有四种方法

1. 在Group buffer中按键 "j":(gnus-group-jump-to-group), 选择Group后, 并能从Group Buffer中可见
#+ATTR_HTML: :width 400px
[[file:./images/gnus-group-buffer-jump.png]] [[file:./images/gnus-group-buffer-jump-2.png]]

2.Group Buffer中按键 "L":(gnus-group-list-all-groups &optional ARG)
[[file:./images/gnus-group-buffer-list.png]]

3.指定可见的邮件组,
从步骤二中的选择需要的Group, 按键G p, 弹出的对话框中加入一行 =(visible . t)=

[[file:./images/gnus-group-buffer-visiale.png]]

此时重新连接gnus, Group Buffer中按键 Z R, =gnus-summary-reselect-current-group=
重新定义的Group便能显示在初始界面.

4.从Server中查看
Group Buffer中按键 ^ (=gnus-group-enter-server-mode=),
在 "{nnimap:qq.com} (opened)" 上按键Space
#+ATTR_HTML: :width 400px
[[file:./images/gnus-group-buffer-server-1.png]] [[file:./images/gnus-group-buffer-server-2.png]]
也可以一步进入Server Group Buffer: A A (=gnus-group-list-active=)

** Archive Messages
Gnus的默认配置, 生成 ="sent.%Y-%m"= 格式的 Send-Mail存档, 这与imap的Send-Messages重复, 因此关闭改功能
#+begin_src emacs-lisp :session gnus :lexical t
(setq gnus-message-archive-group nil)
#+end_src

** New Group
创建新的邮件组
- G m :: Make a new group (=gnus-group-make-group=). Gnus will prompt you for a name, a method and possibly an address.
比如新建Starred Group
G m 之后提示输入Group: Starred,
然后select-method-for-new-group: nnimap:qq.com

Z R 更新 gnus, 然后 L, 便能查看新建的starred Group
设置为可视,
G p 之后, 添加一行
=(visible . t)=

** Delete and Rename Group
- G <DEL> :: gnus-group-delete-group
删除当前的邮件组
- b :: Find bogus groups and delete them (=gnus-group-check-bogus-groups=).
删除bogus邮件组

- G r :: Rename the current group to something else (=gnus-group-rename-group=). This is valid only on some groups---mail groups mostly. This command might very well be quite slow on some back ends.

** Mark Groups
- c ::  Mark all unticked articles in this group as read (=gnus-group-catchup-current=). =gnus-group-catchup-group-hook= is called when catching up a group from the group buffer.
- C :: Mark all articles in this group, even the ticked ones, as read (=gnus-group-catchup-current-all=).
表组Group内所有邮件为已读

- # ::
- M m :: Set the mark on the current group (=gnus-group-mark-group=).
- M-# ::
- M u :: Remove the mark from the current group (=gnus-group-unmark-group=).
- M U :: Remove the mark from all groups (=gnus-group-unmark-all-groups=).
- M w :: Mark all groups between point and mark (=gnus-group-mark-region=).
- M b :: Mark all groups in the buffer (=gnus-group-mark-buffer=).
- M r :: Mark all groups that match some regular expression (=gnus-group-mark-regexp=).
** Sorting Groups
常用的排序方法:
- G S a :: Sort the group buffer alphabetically by group name (=gnus-group-sort-groups-by-alphabet=).
- G S m :: Sort the group buffer alphabetically by back end name
  (=gnus-group-sort-groups-by-method=).
- G S n :: Sort the group buffer alphabetically by real (unprefixed) group name (=gnus-group-sort-groups-by-real-name=).
** Group Timestamp
Trace最近一次打开group的时间戳.(add-hook 'gnus-select-group-hook 'gnus-group-set-timestamp
It can be convenient to let Gnus keep track of when you last read a group. To set the ball rolling, you should add =gnus-group-set-timestamp= to =gnus-select-group-hook=:
添加配置:
#+begin_src emacs-lisp :session gnus :lexical t
(add-hook 'gnus-select-group-hook 'gnus-group-set-timestamp)

(setq gnus-group-line-format
      "%M%S%p%P%5y: %(%-40,40g%) %udn")
         (defun gnus-user-format-function-d (headers)
           (let ((time (gnus-group-timestamp gnus-tmp-group)))
             (if time
                 (format-time-string "%b %d  %H:%M" time)
               "")))
#+end_src

** Group Highlighting
Gnus Manual中推荐的highlight配色配置,
#+begin_src emacs-lisp :session gnus :lexical t
(cond (window-system
       (setq custom-background-mode 'light)
       (defface my-group-face-1
         '((t (:foreground "Red" :bold t))) "First group face")
       (defface (message "")y-group-face-2
         '((t (:foreground "DarkSeaGreen4" :bold t)))
         "Second group face")
       (defface my-group-face-3
         '((t (:foreground "Green4" :bold t))) "Third group face")
       (defface my-group-face-4
         '((t (:foreground "SteelBlue" :bold t))) "Fourth group face")
       (defface my-group-face-5
         '((t (:foreground "Blue" :bold t))) "Fifth group face")))

(setq gnus-group-highlight
      '(((> unread 200) . my-group-face-1)
        ((and (< level 3) (zerop unread)) . my-group-face-2)
        ((< level 3) . my-group-face-3)
        ((zerop unread) . my-group-face-4)
        (t . my-group-face-5)))
#+end_src
* Gnus: 4.Summary Buffer
** Display all
Summary Buffer是Email list,
"INBOX"默认只读取"未读"邮件, 没有未读邮件则为空, 此默认设置并不实用.
从Group Buffer中的"inbox",操作 G p, 添加一行 =(display . all)=
#+begin_src emacs-lisp :session gnus :lexical t
((modseq)
 (uidvalidity .
              #("1579733041" 0 10
                (ws-butler-chg chg)))
 (active 1 . 95)
 (timestamp 24131 49229)
 (display . all) ;; display all emails
 (visible . t)
 (permanent-flags %* %Answered %Flagged %Deleted %Draft %Seen))
#+end_src
** Delete Mails
Gnus删除邮件需要格外注意,
首先设置,
#+begin_src emacs-lisp :session gnus :lexical t
;; Delele mail
(setq nnmail-expiry-wait 'never)
(setq nnmail-expiry-target "Deleted Messages")
#+end_src

=nnmail-expiry-wait= 设置为never, 避免gnus自动删除邮件

删除邮件的动作, 操作移动邮件来完成.
Summary-Buffer中操作 B m, 选定待删除的邮件移动到"Deleted Messages"
- B m :: Move the article from one mail group to another (=gnus-summary-move-article=). Marks will be preserved if =gnus-preserve-marks= is =non-nil= (which is the default).

#+ATTR_HTML: :width 600px
[[file:./images/gnus-summary-buffer-delete.png]]

** Search Mails
从Summary Buffer中查找邮件.
M-s
    Search through all subsequent (raw) articles for a regexp (gnus-summary-search-article-forward).
M-r
    Search through all previous (raw) articles for a regexp (gnus-summary-search-article-backward).
M-&
    Perform any operation on all articles that have been marked with the process mark (gnus-summary-universal-argument).

不错, 测试的结果是"可以用"

也可以从"Group Buffer"中直接搜索

G G :: =nnir= is a Gnus interface to a number of tools for searching through mail and news repositories. Different backends (like =nnimap= and =nntp=) work with different tools (called engines in =nnir= lingo), but all use the same basic search interface.

** Frequent Commands
*回复邮件*
- S r
  r ::  Mail a reply to the author of the current article (=gnus-summary-reply=).
- S R
  R ::  Mail a reply to the author of the current article and include the original message (=gnus-summary-reply-with-original=). This command uses  the process/prefix convention
- S w :: Mail a wide reply to the author of the current article (=gnus-summary-wide-reply=). A wide reply is a reply that goes out to all people listed in the =To=, =From= (or =Reply-to=) and =Cc= headers. If =Mail-Followup-To= is present, that's used instead.
- S W :: Mail a wide reply to the current article and include the original message (=gnus-summary-wide-reply-with-original=). This command uses the process/prefix convention, but only uses the headers from the first article to determine the recipients.
- S f or  f ::  Post a followup to the current article (=gnus-summary-followup=).
- S F or  F :: Post a followup to the current article and include the original message (=gnus-summary-followup-with-original=). This command uses the process/prefix convention.
# 短评: 对邮件, follow-up与replay没有区别.

*写邮件与转发邮件*
- S p or a ::  Prepare for posting an article (=gnus-summary-post-news=). By default, post to the current group. If given a prefix, disable that. If the prefix is 1, prompt for another group instead.
# 短评: 直接用m就好了.
- S m or  m ::  Prepare a mail (=gnus-summary-mail-other-window=). By default, use the posting style of the current group. If given a prefix, disable that. If the prefix is 1, prompt for a group name to find the posting style.
*取消发送*
- S c :: Canceling Article
  Find the article you wish to cancel (you can only cancel your own articles, so don't try any funny stuff). Then press C or S c (=gnus-summary-cancel-article=). Your article will be canceled---machines all over the world will be deleting your article. This command uses the process/prefix convention.
*延迟发送*
- C-c C-j  :: Delayed Articles

 Normally, to send a message you use the C-c C-c command from Message mode. To delay a message, use C-c C-j (=gnus-delay-article=) instead.

*Mark Articles*
- M c or M-u :: Clear all readedness-marks from the current article (=gnus-summary-clear-mark-forward=). In other words, mark the article as unread.
- M t or  ! :: Tick the current article (=gnus-summary-tick-article-forward=).

- M C ::  Mark all unread articles as read (=gnus-summary-catchup=).
# 得到: 这是从article中操作
- M C-c :: Mark all articles in the group as read---even the ticked and dormant articles (=gnus-summary-catchup-all=).
# 短评: 这两个在summary buffer中的操作很实用.
# 标记与取消的命令同样重要．

*Process Mark*
Process marks are displayed as =#= in the summary buffer, and are used for marking articles in such a way that other commands will process these articles.
- M P p
  # ::
- M P u or M-# :: Remove the process mark, if any, from the current article (=gnus-summary-unmark-as-processable=).
# 短评, 这些需要用的时候再看文档.
- M P U :: Remove the process mark from all articles (=gnus-summary-unmark-all-processable=).

*Thread Commands*
- T k
  C-M-k :: Mark all articles in the current (sub-)thread as read (=gnus-summary-kill-thread=). If the prefix argument is positive, remove all marks instead. If the prefix argument is negative, tick articles instead.

*Asynchronous Fetch*
;;3.11 Asynchronous Article Fetching
(setq gnus-asynchronous t)
;;pre-fetch only unread articles shorter than 100 lines, you could say something like:
(defun my-async-short-unread-p (data)
  "Return non-nil for short, unread articles."
  (and (gnus-data-unread-p data)
       (< (mail-header-lines (gnus-data-header data))
          100)))
(setq gnus-async-prefetch-article-p 'my-async-short-unread-p)

*3.13 Persistent Articles*

- * :: Make the current article persistent (=gnus-cache-enter-article=).
- M-* :: Remove the current article from the persistent articles (=gnus-cache-remove-article=). This will normally delete the article.

#+BEGIN_SRC elisp
(setq gnus-use-cache 'passive)
#+END_SRC

*Article Treatement*
highlight的部分值得一看, 但是在第三部分article中.

*Summary Sorting*

 You can have the summary buffer sorted in various ways, even though I can't really see why you'd want that.

- C-c C-s C-n :: Sort by article number (=gnus-summary-sort-by-number=).
- C-c C-s C-m C-n :: Sort by most recent article number (=gnus-summary-sort-by-most-recent-number=).
- C-c C-s C-a :: Sort by author (=gnus-summary-sort-by-author=).
- C-c C-s C-t :: Sort by recipient (=gnus-summary-sort-by-recipient=).
- C-c C-s C-s :: Sort by subject (=gnus-summary-sort-by-subject=).
- C-c C-s C-d :: Sort by date (=gnus-summary-sort-by-date=).
- C-c C-s C-m C-d :: Sort by most recent date (=gnus-summary-sort-by-most-recent-date=).
- C-c C-s C-l :: Sort by lines (=gnus-summary-sort-by-lines=).
- C-c C-s C-c :: Sort by article length (=gnus-summary-sort-by-chars=).
- C-c C-s C-m C-m :: Sort by article “readedness” marks (=gnus-summary-sort-by-marks=).
- C-c C-s C-i :: Sort by score (=gnus-summary-sort-by-score=).
- C-c C-s C-r :: Randomize (=gnus-summary-sort-by-random=).
- C-c C-s C-o :: Sort using the default sorting method (=gnus-summary-sort-by-original=).

*3.23 Finding the Parent*

- ^ :: If you'd like to read the parent of the current article, and it is not displayed in the summary buffer, you might still be able to.
* Gnus: 5.Article Buffer
"Article Buffer"是邮件的正文内容．

*Hiding Headers*
#+begin_src emacs-lisp :session gnus :lexical t
(setq gnus-visible-headers "^From:|^Subject:")
(setq gnus-ignored-headers "^References:|^Xref:")
(setq gnus-sorted-header-list '("^From:" "^Subject:"))
#+end_src

*Block Ads*
#+begin_src emacs-lisp :session gnus :lexical t
(setq gnus-blocked-images "ads")
#+end_srcx
* Gnus: 6.Completed Configuration in Progress

#+begin_src emacs-lisp :session gnus :lexical t
;;; Package --- gnus
;;;

(setq user-mail-address "abst.proc.do@qq.com"
      user-full-name "abst.proc.do")

(setq gnus-select-method
      '(nnimap "qq.com"
               (nnimap-address "imap.qq.com")
               (nnimap-inbox "INBOX")
               (nnimap-split-methods default)
               (nnimap-expunge t)
               (nnimap-server-port 993)
               (nnimap-stream ssl)))

(setq send-mail-function 'smtpmail-send-it
      smtpmail-smtp-server "smtp.qq.com"
      smtpmail-smtp-service 465
      smtpmail-stream-type 'ssl
      gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")

;;(setq gnus-permanently-visible-groups "INBOX")


;; Configuration Following Gnus Manual
;; 2.1.3 Group Highlighting
(cond (window-system
       (setq custom-background-mode 'light)
       (defface my-group-face-1
         '((t (:foreground "Red" :bold t))) "First group face")
       (defface my-group-face-2
         '((t (:foreground "DarkSeaGreen4" :bold t)))
         "Second group face")
       (defface my-group-face-3
         '((t (:foreground "Green4" :bold t))) "Third group face")
       (defface my-group-face-4
         '((t (:foreground "SteelBlue" :bold t))) "Fourth group face")
       (defface my-group-face-5
         '((t (:foreground "Blue" :bold t))) "Fifth group face")))

(setq gnus-group-highlight
      '(((> unread 200) . my-group-face-1)
        ((and (< level 3) (zerop unread)) . my-group-face-2)
        ((< level 3) . my-group-face-3)
        ((zerop unread) . my-group-face-4)
        (t . my-group-face-5)))

;;2.18.3 Group Timestamp
(add-hook 'gnus-select-group-hook 'gnus-group-set-timestamp)
;;(setq gnus-group-line-format
;;"%M%S%p%P%5y: %(%-40,40g%) %6,6~(cut 2)dn")

;; (setq gnus-group-line-format
;;       "%M%S%p%P%5y: %(%-40,40g%) %udn")
;; (defun gnus-user-format-function-d (headers)
;;   (let ((time (gnus-group-timestamp gnus-tmp-group)))
;;     (if time
;;         (format-time-string "%b %d  %H:%M" time)
;;       "")))

;;3.6 Delayed Articles
(gnus-delay-initialize)


;;3.10 Sorting the Summary Buffer
(setq gnus-thread-sort-functions
      '((not gnus-thread-sort-by-number)
        gnus-thread-sort-by-score))

;;3.11 Asynchronous Article Fetching
(setq gnus-asynchronous t)
;;pre-fetch only unread articles shorter than 100 lines, you could say something like:
(defun my-async-short-unread-p (data)
  "Return non-nil for short, unread articles."
  (and (gnus-data-unread-p data)
       (< (mail-header-lines (gnus-data-header data))
          100)))
(setq gnus-async-prefetch-article-p 'my-async-short-unread-p)

;;3.13 Persistent Articles
(setq gnus-use-cache 'passive)

;; 3.25 Tree Display
(setq gnus-use-trees nil)
;; (setq gnus-use-trees t
;;       gnus-generate-tree-function 'gnus-generate-horizontal-tree
;;       gnus-tree-minimize-window nil)
;; (gnus-add-configuration
;;  '(article
;;    (vertical 1.0
;;              (horizontal 0.25
;;                          (summary 0.75 point)
;;                          (tree 1.0))
;;              (article 1.0))))


;;4.3 HTML
(setq gnus-blocked-images "ads")

;;5.4 Mail and Post
(add-hook 'message-send-hook 'ispell-message)

;;5.5 Archived Messages
(setq gnus-message-archive-group nil)


;;6.4.9 Expiring Mail
(remove-hook 'gnus-mark-article-hook              'gnus-summary-mark-read-and-unread-as-read)
(add-hook 'gnus-mark-article-hook 'gnus-summary-mark-unread-as-read)
;; Delele mail
(setq nnmail-expiry-wait 'never)
(setq nnmail-expiry-target "Deleted Messages")

;;9.5 Window Layout
(setq gnus-use-full-window nil)
;;((group (vertical 1.0 (group 1.0 point)))
;; (article (vertical 1.0 (summary 0.25 point)
;;                    (article 1.0))))

;; (gnus-configure-frame
;;  '(frame 1.0
;;          (vertical 1.0
;;                    (summary 0.25 point frame-focus)
;;                    (article 1.0))
;;          (vertical ((height . 5) (width . 15)
;;                     (user-position . t)
;;                     (left . -1) (top . 1))
;;                    (picon 1.0))))

#+end_src
* Gnus Easter Eggs
读Gnus文档无味, 摘取其中有趣有料的句子.

*3.12 Article Caching*
- As you may ~surmise~, this could potentially use /huge/ amounts of disk space, as well as eat up all your inodes so fast it will make your head ~swim in vodka~.

*3.14 Sticky Articles*
But sometimes you might want to display all the latest emails from your mother, your father, your aunt, your uncle and ~your 17 cousins~ to coordinate the next Christmas party

*5.2 Posting Server*
Thank you for asking. I hate you.

*5.7 Drafts*
If you are writing a message (mail or news) and suddenly remember that you have a ~steak in the oven~ (or some pesto in the food processor, you craaazy vegetarians), you'll probably wish there was a method to save the message you are writing so that you can continue editing it some other day, and send it when you feel its finished.

*6.4.9 Expiring Mail*
If you are writing a message (mail or news) and suddenly remember that you have a steak in the oven (or some pesto in the food processor, you craaazy vegetarians), you'll probably wish there was a method to save the message you are writing so that you can continue editing it some other day, and send it when you feel its finished.

最出彩的是"Sending Mail"的一段:
*32.1 The Format of the Mail Buffer*
#+BEGIN_EXAMPLE
To: subotai@example.org
Cc: mongol.soldier@example.net, rms@gnu.org
Subject: Re: What is best in life?
From: conan@example.org
--text follows this line--
To crush your enemies, see them driven before you, and to
hear the ~lamentation~ of their women.
#+END_EXAMPLE
